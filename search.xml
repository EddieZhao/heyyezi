<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Electron2]]></title>
      <url>https://www.heyyezi.com/2017/05/26/Electron2/</url>
      <content type="html"><![CDATA[<h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><h3 id="App"><a href="#App" class="headerlink" title="App"></a>App</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123;app&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</div><div class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</div><div class="line">    app.quit()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h4><ul>
<li><p>will-finish-launching<br>windows 和 linux中，与 ready 一样。</p>
<p>在mac中，<code>NSApplication</code> 中的 <code>applicationWillFinishLaunching</code> 通知。一般此时可以创建open-file 和 open-url的监听事件，和开启 崩溃日志，以及自动更新。</p>
<p>但是，大多数时候，你不需要管这一步, 也不需要做什么。</p>
</li>
<li><p>ready</p>
<ul>
<li>在mac中 会返回lanchInfo的信息<br>一切初始化完成之后，到这里。在mac中，如果是从消息中心打开的，那么可以调用,app.isReady()来检查是不是都已经准备好。</li>
</ul>
</li>
<li><p>window-all-closed<br>  如果用户，执行<code>Cmd + Q</code>, 活着开发者直接调用<code>app.quit()</code>, 会直接出发<code>will-quit</code>, 但是，but，就不会不会触发这个事件</p>
</li>
<li><p>befor-quit</p>
<ul>
<li>返回 Event<br>触发关闭窗口之前执行。可以调用<code>event.preventDefault()</code>, 阻止默认事件的触发。</li>
</ul>
</li>
<li><p>will-quit</p>
<ul>
<li>返回 Event<br><code>event.preventDefault()</code>, 可以阻止默认是事件发生。</li>
</ul>
</li>
<li><p>quit</p>
<ul>
<li>返回 Event </li>
<li>返回 exitCode 整数</li>
</ul>
</li>
<li><p>open-file <strong>mac</strong></p>
<ul>
<li>Event</li>
<li>String</li>
</ul>
</li>
<li><p>open-url <strong>mac</strong></p>
<ul>
<li>Event</li>
<li>String</li>
</ul>
</li>
<li><p>activate <strong>mac</strong></p>
<ul>
<li>Event</li>
<li>hasVisibleWindows, 布尔值类型<br>当程序被激活的时候，比如第一次打开软件，比如重新打开一个再运行的软件，或者点击边栏上的图表什么的。</li>
</ul>
</li>
<li><p>continue-activity <strong>mac</strong></p>
<ul>
<li>event Event</li>
<li>type String </li>
<li>userInfo Object</li>
</ul>
</li>
</ul>
<p>擦，好多，这货一般没啥用。</p>
<ul>
<li>browser-window-blur<ul>
<li>event Event</li>
<li>window BrowserWindow<br>blur: 模糊</li>
</ul>
</li>
</ul>
<ul>
<li>browser-window-focus<ul>
<li>event Event</li>
<li>window BrowserWindow</li>
</ul>
</li>
</ul>
<p>获取焦点的时候，巴拉巴拉….</p>
<ul>
<li>browser-window-created<ul>
<li>event Event</li>
<li>window BrowserWindow</li>
</ul>
</li>
</ul>
<p>被创建的时候</p>
<ul>
<li><p>web-contents-created</p>
<ul>
<li>event Event</li>
<li>webContents WebContents</li>
</ul>
</li>
<li><p>certificate-error</p>
<ul>
<li>event Event</li>
<li>webContents WebContents</li>
<li>url String</li>
<li>error String - 错误码</li>
<li>certificate Certificate 证书</li>
<li>callback Function<ul>
<li>isTrusted Boolean 证书是否被信任</li>
</ul>
</li>
</ul>
<p>当证书验证失败的时候。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123;app&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</div><div class="line">app.on(<span class="string">'certificate-error'</span>, (event, webContents, url, error, certificate, callback) =&gt; &#123;</div><div class="line"> <span class="keyword">if</span> (url === <span class="string">'https://github.com'</span>) &#123;</div><div class="line">   <span class="comment">// Verification logic.</span></div><div class="line">   event.preventDefault()</div><div class="line">   callback(<span class="literal">true</span>)</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line">   callback(<span class="literal">false</span>)</div><div class="line"> &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>select-client-certificate</p>
<ul>
<li>event Event</li>
<li>webContents WebContents</li>
<li>url URL</li>
<li>certificateList Certificate[] 证书列表</li>
<li>callback Function</li>
<li>certificate <ul>
<li>Certificate 选填<br>当客户端需要验证证书的时候，触发。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123;app&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</div><div class="line"></div><div class="line">app.on(<span class="string">'select-client-certificate'</span>, (event, webContents, url, list, callback) =&gt; &#123;</div><div class="line">  event.preventDefault()</div><div class="line">  callback(list[<span class="number">0</span>])</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>login <strong>重要</strong></p>
<ul>
<li>Returns:<ul>
<li>event Event</li>
<li>webContents WebContents</li>
<li>request Object<ul>
<li>method String</li>
<li>url URL</li>
<li>referrer URL</li>
</ul>
</li>
<li>authInfo Object<ul>
<li>isProxy Boolean</li>
<li>scheme String</li>
<li>host String</li>
<li>port Integer</li>
<li>realm String</li>
</ul>
</li>
<li>callback Function<ul>
<li>username String</li>
<li>password String</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>当<code>webContents</code> 想要做登录验证的时候。</p>
<p>默认是取消所有的验证，你可以重载这个方法，阻止它默认的行文(event.preventDefault)，然后调用callback(username, password)去验证。</p>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul>
<li>app.quit()</li>
<li>app.exit([exitCode])</li>
<li><p>app.relaunch([options])</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123;app&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</div><div class="line"></div><div class="line">app.relaunch(&#123;<span class="attr">args</span>: process.argv.slice(<span class="number">1</span>).concat([<span class="string">'--relaunch'</span>])&#125;)</div><div class="line">app.exit(<span class="number">0</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>app.isReady()</p>
</li>
<li>app.focus()</li>
<li>app.hide() <strong>mac</strong></li>
<li>app.show() <strong>mac</strong></li>
<li>app.getAppPath(), 返回当前APP的路径</li>
<li>app.getPath(name), name: String<br>返回<code>String</code>, 可选参数有 <code>console.log(app.getPath(&#39;home&#39;))</code><ul>
<li>home 用户的家目录</li>
<li>appData 每个用户的data目录<ul>
<li><code>%APPDATA%</code> on Windows</li>
<li><code>$XDG_CONFIG_HOME</code> or <code>~/.config</code> on Linux</li>
<li><code>~/Library/Application</code> Support on macOS</li>
</ul>
</li>
<li>userData, 用户的配置文件，默认是在<code>appData</code>目录后面加上你的app的名字</li>
<li>temp， 临时目录地址</li>
<li>exe 当前可执行文件</li>
<li>module, <code>libchromiumcontent</code>, 目录地址</li>
<li>desktop, 当前用户的桌面地址</li>
<li>documents, 用户的的<code>My Documents</code></li>
<li>downloads, 用户的用户下载路径</li>
<li>music 用户的music地址</li>
<li>pictures 用户的图片地址</li>
<li>videos 用户的视频地址</li>
<li>pepperFlashSystemPlugin, 呃，别用了，flash的</li>
</ul>
</li>
<li>app.getFileIcon(path[, options], callback)<ul>
<li>path String</li>
<li>options <ul>
<li>size String<ul>
<li>small - 16x16</li>
<li>normal - 32x32</li>
<li>large - 48x48(Linux), 32x32(windows)</li>
</ul>
</li>
</ul>
</li>
<li>callback Function<ul>
<li>error</li>
<li>icon</li>
</ul>
</li>
</ul>
</li>
<li>app.setPath(name, path)<ul>
<li>name, 设置路径对应的别名</li>
<li>path，真实路径<br>如果，path不存在，那么就会创建，如果报错，那么就会抛出错误。</li>
</ul>
</li>
<li>app.getVersion()</li>
<li>app.getName()，当前应用的名称</li>
<li>app.setName(name)</li>
<li>app.getLocale()，获取多语言环境</li>
<li>app.addRecentDocument(path) <strong>mac*, </strong>windows**</li>
<li>app.clearRecentDocuments() <strong>mac*, </strong>windows**</li>
<li><p>app.makeSingleInstance(callback)</p>
<ul>
<li>callback Function<ul>
<li>argv String[] - 第二个这个app实例所带的参数</li>
<li>workingDirectory String - 第二个实例所在的目录地址<br>设置你的app只能打开一个，<br>callback，会在第二个实例启动的时候，被调用。一般这个时候，相应只是让当前的窗口获取焦点，不能被最小化。<br>如果你的窗口就是主窗口，那么method返回false<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123;app&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</div><div class="line"><span class="keyword">let</span> myWindow = <span class="literal">null</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> shouldQuit = app.makeSingleInstance(<span class="function">(<span class="params">commandLine, workingDirectory</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 有人又点击你了，要注意啊，少年.</span></div><div class="line">  <span class="keyword">if</span> (myWindow) &#123;</div><div class="line">  <span class="comment">// 所以我判断一下是不是最小化的了</span></div><div class="line">    <span class="keyword">if</span> (myWindow.isMinimized()) myWindow.restore()</div><div class="line">    <span class="comment">// 所以我要获取焦点</span></div><div class="line">    myWindow.focus()</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">if</span> (shouldQuit) &#123;</div><div class="line">  app.quit()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Create myWindow, load the rest of the app, etc...</span></div><div class="line">app.on(<span class="string">'ready'</span>, () =&gt; &#123;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>app.releaseSingleInstance(), 释放所有的单例。这样会导致多个实例，一个接一个的运行。</p>
</li>
<li>app.setUserActivity(type, userInfo[, webpageURL]) <strong>mac</strong></li>
<li>app.getCurrentActivityType(), 获取当前的。。。 <strong>mac</strong></li>
<li>app.setLoginItemSettings(settings[, path, args]) <strong>mac</strong>, <strong>windows</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> appFolder = path.dirname(process.execPath)</div><div class="line"><span class="keyword">const</span> updateExe = path.resolve(appFolder, <span class="string">'..'</span>, <span class="string">'Update.exe'</span>)</div><div class="line"><span class="keyword">const</span> exeName = path.basename(process.execPath)</div><div class="line"></div><div class="line">app.setLoginItemSettings(&#123;</div><div class="line">  <span class="attr">openAtLogin</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">path</span>: updateExe,</div><div class="line">  <span class="attr">args</span>: [</div><div class="line">    <span class="string">'--processStart'</span>, <span class="string">`"<span class="subst">$&#123;exeName&#125;</span>"`</span>,</div><div class="line">    <span class="string">'--process-start-args'</span>, <span class="string">`"--hidden"`</span></div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>app.dock.setIcon(image)<strong>mac</strong>, 设置icon图片</li>
<li>app.dock.setMenu(menu)<strong>mac</strong>, 设置dock的menu</li>
<li>app.dock.hide()<strong>mac</strong>, 隐藏dock</li>
<li>app.dock.show()<strong>mac</strong>, 显示dock</li>
<li>app.dock.getBadge()<strong>mac</strong></li>
</ul>
<h2 id="BrowserWindow"><a href="#BrowserWindow" class="headerlink" title="BrowserWindow"></a>BrowserWindow</h2><blockquote>
<p>创建和控制窗口</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在主进程里面</span></div><div class="line"><span class="keyword">const</span> &#123;BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 或者在其它进程中，从renderer 进程中创建`remote` </span></div><div class="line"><span class="comment">// const &#123;BrowserWindow&#125; = require('electron').remote</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> win = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span>&#125;)</div><div class="line">win.on(<span class="string">'closed'</span>, () =&gt; &#123;</div><div class="line">  win = <span class="literal">null</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 加载远程页面</span></div><div class="line">win.loadURL(<span class="string">'https://github.com'</span>)</div><div class="line"></div><div class="line"><span class="comment">// Or 加载本地文件</span></div><div class="line">win.loadURL(<span class="string">`file://<span class="subst">$&#123;__dirname&#125;</span>/app/index.html`</span>)</div></pre></td></tr></table></figure>
<h3 id="漂亮的显示窗口"><a href="#漂亮的显示窗口" class="headerlink" title="漂亮的显示窗口"></a>漂亮的显示窗口</h3><ul>
<li>ready-to-show事件, 加载期间会被调用，直到第一次加载成功</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123;BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</div><div class="line"><span class="keyword">let</span> win = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">show</span>: <span class="literal">false</span>&#125;)</div><div class="line">win.once(<span class="string">'ready-to-show'</span>, () =&gt; &#123;</div><div class="line">  win.show()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>backgroundColor, 设置显示颜色</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123;BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> win = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">backgroundColor</span>: <span class="string">'#2e2c29'</span>&#125;)</div><div class="line">win.loadURL(<span class="string">'https://github.com'</span>)</div></pre></td></tr></table></figure>
<h3 id="父窗口等"><a href="#父窗口等" class="headerlink" title="父窗口等"></a>父窗口等</h3><h4 id="parent"><a href="#parent" class="headerlink" title="parent"></a>parent</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123;BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> top = <span class="keyword">new</span> BrowserWindow()</div><div class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">parent</span>: top&#125;)</div><div class="line">child.show()</div><div class="line">top.show()</div></pre></td></tr></table></figure>
<h4 id="Modal-windows"><a href="#Modal-windows" class="headerlink" title="Modal windows"></a>Modal windows</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> &#123;BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">parent</span>: top, <span class="attr">modal</span>: <span class="literal">true</span>, <span class="attr">show</span>: <span class="literal">false</span>&#125;)</div><div class="line">child.loadURL(<span class="string">'https://github.com'</span>)</div><div class="line">child.once(<span class="string">'ready-to-show'</span>, () =&gt; &#123;</div><div class="line">  child.show()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul>
<li>mac中，modal窗口会向一个, 嗯显示效果，挺漂亮的哈</li>
<li>mac中，子窗口会与主窗口保持一个位置，而Windows和Linux中不会。</li>
</ul>
<h2 id="Class-BrowserWindow"><a href="#Class-BrowserWindow" class="headerlink" title="Class: BrowserWindow"></a>Class: BrowserWindow</h2><h3 id="new-BrowserWindow-options"><a href="#new-BrowserWindow-options" class="headerlink" title="new BrowserWindow([options])"></a>new BrowserWindow([options])</h3><ul>
<li>options Object(可选)<ul>
<li>width Integer, 窗口宽度，默认是 800</li>
<li>height Integer, 窗口高度, 默认是600</li>
<li>x Integer, 距离屏幕举例左边的坐标，默认是中间</li>
<li>y Integer, 距离上面的坐标，默认是中间</li>
<li>useContentSize, Boolean, width 和 height是否用于Web页面的尺寸，意味着实际的窗口大小，将包含窗口框架大小，并且稍微大一谢谢。默认是 false</li>
<li>center, Boolean, 显示在屏幕正中</li>
<li>minWidth, Integer, 最小的width，默认是0</li>
<li>minWidth Integer (optional) - Window’s minimum width. Default is 0.</li>
<li>minHeight Integer (optional) - Window’s minimum height. Default is 0.</li>
<li>maxWidth Integer (optional) - Window’s maximum width. Default is no limit.</li>
<li>maxHeight Integer (optional) - Window’s maximum height. Default is no limit.</li>
<li>resizable Boolean (optional) - 窗口是否可以调整大小. 默认是true</li>
<li>closable Boolean (optional) - 是否可以关闭窗口. Linux中不能用. 默认是 true.</li>
<li><code>&quot;node-integration&quot;</code>, 默认加载远程url的时候，是不会加载jquery等框架的，如果需要，请设置为false</li>
</ul>
</li>
</ul>
<h3 id="Instance-Events"><a href="#Instance-Events" class="headerlink" title="Instance Events"></a>Instance Events</h3><p> new一个实例之后，有这些事件, <code>close</code>等<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> window.onbeforeunload = (e) =&gt; &#123;</div><div class="line">  console.log(&apos;I do not want to be closed&apos;)</div><div class="line"></div><div class="line">  // Unlike usual browsers that a message box will be prompted to users, returning</div><div class="line">  // a non-void value will silently cancel the close.</div><div class="line">  // It is recommended to use the dialog API to let the user confirm closing the</div><div class="line">  // application.</div><div class="line">  e.returnValue = false</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><ul>
<li>BrowserWindow.getAllWindows()<br>获取所有BrowserWindows的窗口数组。</li>
<li>BrowserWindow.getFocusedWindow()<br>获取当前有焦点的窗口。</li>
<li>BrowserWindow.fromWebContents(webContents)</li>
<li>BrowserWindow.fromId(id)</li>
</ul>
<h3 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123;BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> win = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span>&#125;)</div><div class="line">win.loadURL(<span class="string">'https://github.com'</span>)</div></pre></td></tr></table></figure>
<ul>
<li>win.webContent</li>
<li>win.id</li>
</ul>
<h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><ul>
<li>win.destroy()</li>
<li>win.close()</li>
<li>win.focus()</li>
<li>win.blur()//模糊</li>
<li>win.isFocused()</li>
<li>win.isDestroyed()</li>
<li>win.show()</li>
<li>win.showInactive(), 显示窗口，但是放焦点</li>
<li>win.hide()</li>
<li>win.isVisible() , 返回Boolean值，是否用户可见</li>
<li>win.isModal(), 当前的窗口是不是modal框</li>
<li>win.maximize(), 最大化窗口</li>
<li>win.unmaximize()</li>
<li>win.restore(), 从最小化状态，重置会之前的状态</li>
<li>win.isMinimized()</li>
<li>win.setFullScreen(flag), flag: 布尔值，设置受否全屏</li>
<li>win.previewFile(path[, displayName]), <strong>Mac</strong></li>
<li>win.closeFilePreview(), <strong>Mac</strong></li>
<li>win.setMinimumSize(width, height)</li>
<li>win.getMinimumSize()</li>
<li>win.setMaximumSize(width, height)</li>
<li>win.getMaximumSize()</li>
<li>win.setResizable(resizable)</li>
<li>win.isMovable() <strong>Mac</strong> <strong>Window</strong></li>
<li>win.isFullScreenable()</li>
<li>win.isAlwaysOnTop()</li>
<li>win.setTitle(title)</li>
<li>win.setSheetOffset(offsetY[, offsetX]), <strong>Mac</strong></li>
<li>win.loadURL(url[, options])<ul>
<li>url </li>
<li>options <ul>
<li>httpReferrer</li>
<li>userAgent</li>
<li>extraHeaders</li>
<li>postData (UploadRawData | UploadFile | UploadFileSystem | UploadBlob)[]</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>).format(&#123;</div><div class="line">  <span class="attr">protocol</span>: <span class="string">'file'</span>,</div><div class="line">  <span class="attr">slashes</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">pathname</span>: <span class="built_in">require</span>(<span class="string">'path'</span>).join(__dirname, <span class="string">'index.html'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">win.loadURL(url)</div></pre></td></tr></table></figure>
<p>POST: </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">win.loadURL(<span class="string">'http://localhost:8000/post'</span>, &#123;</div><div class="line">  <span class="attr">postData</span>: [&#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'rawData'</span>,</div><div class="line">    <span class="attr">bytes</span>: Buffer.from(<span class="string">'hello=world'</span>)</div><div class="line">  &#125;],</div><div class="line">  <span class="attr">extraHeaders</span>: <span class="string">'Content-Type: application/x-www-form-urlencoded'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>win.reload()</li>
<li>win.setMenu(menu) <strong>Linux</strong> <strong>Windows</strong></li>
<li>win.setProgressBar(progress[, options])<ul>
<li>progress Double类型</li>
</ul>
</li>
</ul>
<h2 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h2><h3 id="new-Menu"><a href="#new-Menu" class="headerlink" title="new Menu()"></a>new Menu()</h3><p>创建一个菜单</p>
<h3 id="Menu-setApplicationMenu-menu"><a href="#Menu-setApplicationMenu-menu" class="headerlink" title="Menu.setApplicationMenu(menu)"></a>Menu.setApplicationMenu(menu)</h3><p>给项目设置菜单</p>
<h3 id="Menu-buildFromTemplate-template"><a href="#Menu-buildFromTemplate-template" class="headerlink" title="Menu.buildFromTemplate(template)"></a>Menu.buildFromTemplate(template)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> template = [</div><div class="line">  &#123;</div><div class="line">    <span class="attr">label</span>: <span class="string">'修改'</span>,</div><div class="line">    <span class="attr">submenu</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">role</span>: <span class="string">'pasteandmatchstyle'</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="其他页面的标签"><a href="#其他页面的标签" class="headerlink" title="其他页面的标签"></a>其他页面的标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">const</span> &#123;remote&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</div><div class="line"><span class="keyword">const</span> &#123;Menu, MenuItem&#125; = remote</div><div class="line"></div><div class="line"><span class="keyword">const</span> menu = <span class="keyword">new</span> Menu()</div><div class="line">menu.append(<span class="keyword">new</span> MenuItem(&#123;<span class="attr">label</span>: <span class="string">'MenuItem1'</span>, click() &#123; <span class="built_in">console</span>.log(<span class="string">'item 1 clicked'</span>) &#125;&#125;))</div><div class="line">menu.append(<span class="keyword">new</span> MenuItem(&#123;<span class="attr">type</span>: <span class="string">'separator'</span>&#125;))</div><div class="line">menu.append(<span class="keyword">new</span> MenuItem(&#123;<span class="attr">label</span>: <span class="string">'MenuItem2'</span>, <span class="attr">type</span>: <span class="string">'checkbox'</span>, <span class="attr">checked</span>: <span class="literal">true</span>&#125;))</div><div class="line"></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'contextmenu'</span>, (e) =&gt; &#123;</div><div class="line">  e.preventDefault()</div><div class="line">  menu.popup(remote.getCurrentWindow())</div><div class="line">&#125;, <span class="literal">false</span>)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="MenuItem"><a href="#MenuItem" class="headerlink" title="MenuItem"></a>MenuItem</h2><p>添加item</p>
<h3 id="new-MenuItem-options"><a href="#new-MenuItem-options" class="headerlink" title="new MenuItem(options)"></a>new MenuItem(options)</h3><ul>
<li>options Object<ul>
<li>click Function (optional) - 点击时触发.<ul>
<li>menuItem MenuItem</li>
<li>browserWindow BrowserWindow</li>
<li>event Event</li>
</ul>
</li>
<li>role String (optional) - 定义原生操作类，有(undo, redo, cut, copy, paste, selectall, delete, minimize, reload), 这些action可以提供原生的体验.</li>
<li>type String (optional) - Can be normal, separator, submenu, checkbox or radio.</li>
<li>label String - (optional)</li>
<li>sublabel String - (optional)</li>
<li>accelerator Accelerator (optional)</li>
<li>icon (NativeImage | String) (optional)</li>
<li>enabled Boolean (optional) - 如果是 false, 置灰，并且不可点击.</li>
<li>visible Boolean (optional) - 如果是 false, 就隐藏.</li>
<li>checked Boolean (optional) - 只对checkbox 和 radio button有效.</li>
<li>submenu (MenuItemConstructorOptions[] | Menu) (optional) </li>
<li>id String (optional) - 唯一属性ID.</li>
<li>position String (optional) .</li>
</ul>
</li>
</ul>
<h2 id="ipcMain-ipcRenderer"><a href="#ipcMain-ipcRenderer" class="headerlink" title="ipcMain, ipcRenderer"></a>ipcMain, ipcRenderer</h2><ul>
<li>ipcMain: 主进程与子进程进行通信，</li>
<li>ipcRenderer: 子进程与主进程进行通信</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> &#123;ipcMain&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</div><div class="line"></div><div class="line">ipcMain.on(<span class="string">'asynchronous-message'</span>, (event, arg) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(arg); <span class="comment">// 'ping'</span></div><div class="line">    <span class="comment">//中转一下，发给index.html</span></div><div class="line">    event.sender.send(<span class="string">'asynchronous-reply'</span>, <span class="string">'pong'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ipcMain.on(<span class="string">'synchronous-message'</span>, (event, arg) =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(arg)  <span class="comment">// prints "ping"</span></div><div class="line">  event.returnValue = <span class="string">'pong'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// index.html.</span></div><div class="line"><span class="keyword">const</span> &#123;ipcRenderer&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</div><div class="line"><span class="built_in">console</span>.log(ipcRenderer.sendSync(<span class="string">'synchronous-message'</span>, <span class="string">'ping'</span>)) <span class="comment">// prints "pong"</span></div><div class="line"></div><div class="line">ipcRenderer.on(<span class="string">'asynchronous-reply'</span>, (event, arg) =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(arg) <span class="comment">// prints "pong"</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">ipcRenderer.send(<span class="string">'asynchronous-message'</span>, <span class="string">'ping'</span>)</div></pre></td></tr></table></figure>
<h2 id="webview"><a href="#webview" class="headerlink" title="webview"></a>webview</h2><p>注意，如果需要隐藏webview，那么需要不能直接设置<code>style=&quot;display:none&quot;</code>, 这会导致，renderer 进程不能监控，是否加载完成等。</p>
<p>如果，一定要隐藏，那么请独立写css 的属性，如:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">  webview &#123;</div><div class="line">    display:inline-flex;</div><div class="line">    width:640px;</div><div class="line">    height:480px;</div><div class="line">  &#125;</div><div class="line">  webview.hide &#123;</div><div class="line">    flex: 0 1;</div><div class="line">    width: 0px;</div><div class="line">    height: 0px;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 隐藏 webview--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">webview</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span><span class="tag">&lt;/<span class="name">webview</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> coding </category>
            
            <category> NodeJS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如梦令]]></title>
      <url>https://www.heyyezi.com/2017/05/14/think/</url>
      <content type="html"><![CDATA[<blockquote>
<p>自在飞花轻似梦，无边丝雨细如愁。痴人说梦，不值一看。</p>
</blockquote>
<p><img src="http://7j1zy0.com1.z0.glb.clouddn.com/psb.jpeg" alt="那人"></p>
<p>&emsp; 我从未觉得太阳如此亲切。</p>
<p>&emsp; 然而，当你眼睁睁的看着它西沉而去。上一秒还沐浴在阳光底下活蹦乱跳，下一秒，你就像摔到了暗无天日的冰窖里……</p>
<p>&emsp; 那是一种怎样的绝望，我至今仿佛依然能感到那刺骨的寒风，和无边的黑暗。我记得那是6月的一个下午吧。</p>
<p>&emsp; 六月的真的是满山苍翠，郁郁葱葱。还记得，第一次去要去征服星辰大海，前一天晚上，踌躇满志，早早的收拾好70L的登山包，就等第二天带上崭新的装备，穿上刚买的还反光的冲锋衣，冲锋裤，登山靴，登山杖，雄赳赳气昂昂。像极了一个要去拯救宇宙的战士。</p>
<p>&emsp; 到了山脚下，是12点左右，我那一身装备，带给我的已经不是自豪，而是快要热炸了的赶脚。于是在别人的奇怪注视之下，还是换上了短衣短裤，这时，才觉得神清气爽。哈哈哈哈哈。</p>
<p>&emsp; 销魂坡(后来，发现香山那个真的是太容易了)，我第一次看到了这个著名的”景点”, 一个箭步冲上去，就要开始爬，快90度将近两层楼高高度，爬到中间，基本就要废。当时真的就想，卧槽，好难。关键是你还不能停，因为你的后面已经有很多人在爬了，你是不能后退的。咬咬牙，四脚朝地，拼命抓住任何能抓住的东西，闭着眼，就是冲，当最终到了终点之后，一屁股坐到地上，只剩下自己大口大口的喘气，早已经顾不得什么形象，什么鬼了，就想躺下来休息一下。</p>
<p>&emsp; 现在想来，这一切才刚刚开始，连序章都不算。</p>
<p>&emsp; 后来又经历了，各种神奇的事情，这一切已经不重要了。</p>
<h3 id="人"><a href="#人" class="headerlink" title="人"></a>人</h3><p>&emsp; 讲真，我已经不太记得，那些人是谁了，路上的友人，大家都是很亲切的，欢声笑语，互相鼓励。</p>
<p>我记得，在那里，能吃一包方便面，有汤有面，那种幸福哟，就算你给我1w块我都不跟你换。</p>
<h4 id="黑仔"><a href="#黑仔" class="headerlink" title="黑仔"></a>黑仔</h4><p>一个广东的少年，我记得他背着锅，和米，还有从家里拿的腊肠，当场给我们做煲仔饭，真的很好吃，怎么形容呢，这个好吃，只能靠你自己去想象了，那种唇齿留香的感觉哟。</p>
<h4 id="A君"><a href="#A君" class="headerlink" title="A君"></a>A君</h4><p>一个很可爱的南方姑娘啊，她在那里，总会不自觉的去捡某些人留下的，塑料袋，易拉罐啊这些垃圾，我记得，有一些塑料袋，会被刮到悬崖边上，她会蹑手蹑脚的，拿一根树枝，拨回来，认真放在自己的背包里。。。。。凡她走过，总要尽力去捡</p>
<p><strong>在此，我鄙视那些在那里，扔垃圾的人，我们都是自己被上去，再把垃圾背下去，这是功德，也是私德，你想想不到，那种不可降解垃圾，对资源造成怎么样的伤害</strong></p>
<h5 id="B君"><a href="#B君" class="headerlink" title="B君"></a>B君</h5><p> 一个康巴汉子，走这些路，对他来说如履平地，开的玩笑有些粗俗，乐呵呵的，高声唱歌，开怀大笑，特别喜欢找人讲冷笑话（虽然大家都听不懂，口音太重）。<br> 但是他每次，都是走在最后，我记得那是入夜，有人走岔了（省略），最后他在最后，把那个走岔的人找到了，没有电视上那种劫后余生的抱头痛哭，所有人只是静静地坐在地上，出奇的安静，瘆人的安静。</p>
<p>…….</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 回忆 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Electron]]></title>
      <url>https://www.heyyezi.com/2017/04/11/electron/</url>
      <content type="html"><![CDATA[<blockquote>
<p>简单介绍一个Node 工具<br><a id="more"></a></p>
</blockquote>
<p><img src="https://cloud.githubusercontent.com/assets/378023/15172388/b2b81950-1790-11e6-9a7c-ccc39912bb3a.png" alt="Electron"></p>
<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>这货很厉害。</p>
<h3 id="开发组件-Devtron"><a href="#开发组件-Devtron" class="headerlink" title="开发组件 Devtron"></a>开发组件 Devtron</h3><p>安装 <strong><em>npm install devtron –save</em></strong></p>
<p>在console中，加载安装模块 <strong><em>require(‘devtron’).install()</em></strong></p>
<p>它可以监控，每一个组件等等</p>
<h3 id="测试组件-Spectron"><a href="#测试组件-Spectron" class="headerlink" title="测试组件 Spectron"></a>测试组件 Spectron</h3><p> 用来测试每一个窗口，以及webview</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.client.auditAccessibility().then(<span class="function"><span class="keyword">function</span> (<span class="params">audit</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (audit.failed) &#123;</div><div class="line">    <span class="built_in">console</span>.error(audit.message)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="应用的组成"><a href="#应用的组成" class="headerlink" title="应用的组成"></a>应用的组成</h3><ul>
<li><p>Mac中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">electron/Electron.app/Contents/Resources/app/</div><div class="line">├── package.json</div><div class="line">├── main.js</div><div class="line">└── index.html</div></pre></td></tr></table></figure>
</li>
<li><p>Windows 和 Linux</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">electron/resources/app</div><div class="line">├── package.json</div><div class="line">├── main.js</div><div class="line">└── index.html</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="打包文件"><a href="#打包文件" class="headerlink" title="打包文件"></a>打包文件</h3><p> 使用<strong>asar</strong>, 进行文件打包, 这样文件目录就变成了<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">electron/Electron.app/Contents/Resources/app/</div><div class="line">└── app.asar</div></pre></td></tr></table></figure></p>
<ul>
<li>Windows 和 Linux<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"> electron/resources/app</div><div class="line"> └── app.asar</div><div class="line"></div><div class="line">### 使用到的打包工具</div><div class="line"></div><div class="line">- [electron-builder](https://github.com/electron-userland/electron-builder)</div><div class="line">- [electron-packager](https://github.com/electron-userland/electron-packager)</div><div class="line"></div><div class="line">### 调试</div><div class="line">- 使用devtron工具调试</div><div class="line">-  --debug=[port], 设置调试端口</div><div class="line">-  --debug-brk=[port], 基本跟上面一样，但是它会暂停中断执行</div><div class="line"></div><div class="line">## 程序结构</div><div class="line"></div><div class="line">### 主进程</div><div class="line"> 入口主文件，负责创建界面，管理界面什么的。</div><div class="line"></div><div class="line">### 渲染进程</div><div class="line"> 负责渲染界面，并且可以访问系统资源。</div><div class="line"></div><div class="line">### 主进程 和 渲染进程 的区别</div><div class="line">  `主进程`负责创建窗口`实例什么的，同时每一个`窗口`实例的都会有自己的`渲染进程`. 那么，当`窗口`实例被销毁，同时`渲染进程`同时被销毁。</div><div class="line">  `主进程`负责管理上面的所有操作。</div><div class="line">  TODO： 注意不允许管理原生资源的问题。</div><div class="line"></div><div class="line">### 最简结构</div></pre></td></tr></table></figure>
</li>
</ul>
<p>playcrab/<br>├── package.json<br>├── main.js<br>└── index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- package.json, 不做多解释，不懂的也就别看这个文章了；建议如下进行配置</div><div class="line">```javascript</div><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;playcrab&quot;,</div><div class="line">  &quot;version&quot;: &quot;0.1.0&quot; # 一定要写当前版本</div><div class="line">  &quot;main&quot;: &quot;main.js&quot; # 一定要写入口文件，如果没有这个，默认是index.js</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>main.js, 需要创建你需要的窗口，以及各种系统事件，比如:<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">const &#123;app, BrowserWindow&#125; = require('electron');</div><div class="line">const path = require('path');</div><div class="line">const url = require('url');</div><div class="line"></div><div class="line"># 为了保持窗口不会被关闭掉，请让窗口变量变成全局的。</div><div class="line">let win;</div><div class="line"></div><div class="line">function createWindow() &#123;</div><div class="line">  //新建一个窗口，并且初始化窗口大小</div><div class="line">  win = new BrowserWindow(&#123;</div><div class="line">    width: 800,</div><div class="line">    height: 600</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  // 加载系统的html</div><div class="line">  win.loadURL(url.format(&#123;</div><div class="line">    pathname: path.join(__dirname, 'index.html'),</div><div class="line">    protocol: 'file:',</div><div class="line">    slashes: true</div><div class="line">  &#125;));</div><div class="line"></div><div class="line">  // 打开调试窗口</div><div class="line">  win.webContent.openDevTools();</div><div class="line"></div><div class="line">  // 绑定关闭事件</div><div class="line"></div><div class="line">  win.on('close', () =&gt; &#123;</div><div class="line">    // 通常我们是会有很多窗口，也就是是一个数组，</div><div class="line">    // 你应该把那个窗口删掉</div><div class="line">    // !!!而不是把所有窗口关闭</div><div class="line">    // !!!而不是把所有窗口关闭</div><div class="line">    // !!!而不是把所有窗口关闭</div><div class="line">    win = null;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 初始化之后，执行</div><div class="line">app.on('ready', createWindow);</div><div class="line"></div><div class="line">// 当所有窗口都关闭之后，程序退出</div><div class="line">app.on('window-all-closed', () =&gt; &#123;</div><div class="line">  // 在Mac中，之后执行 Cmd + Q 之后才算退出。</div><div class="line">  if (process.platform !== 'darwin') &#123;</div><div class="line">    app.quit()</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.on('activate', () =&gt; &#123;</div><div class="line">  # 在Mac中，如果应用还在活跃中，但是已经没有窗口了，那么就需要重新调用 创建窗口</div><div class="line">  if (win === null) &#123;</div><div class="line">    createWindow()</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>最后，修改index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    Electron版本: <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(process.versions.electron)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>.</div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>以上直接抄的官网的</strong></p>
<p>暂时先这些,<br>未完，待续…..</p>
]]></content>
      
        <categories>
            
            <category> coding </category>
            
            <category> NodeJS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[koa]]></title>
      <url>https://www.heyyezi.com/2017/04/01/koa/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这是项目被证明其实行不通，但是过程还是可以记录一下。<br><a id="more"></a></p>
</blockquote>
<h2 id="Koa-2"><a href="#Koa-2" class="headerlink" title="Koa 2"></a>Koa 2</h2><p>  这是一个极其简单的的Web框架，核心框架就几个文件。它需要的环境必须大于等于Node V7(另一种方式我觉得就不要试了)，因为它使用了原生的Async/Await方法，这些都可以有效的避免回调地狱的问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">application.js # 核心库</div><div class="line">context.js # 上下文处理，比如toJson(), Error处理，Request和Response处理路由</div><div class="line">request.js # Request 详细处理类</div><div class="line">response.js # Response 详细处理类</div></pre></td></tr></table></figure></p>
<ol>
<li>老规矩，Hello World镇楼:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</div><div class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</div><div class="line"></div><div class="line">app.use(<span class="function"><span class="params">cxt</span> =&gt;</span> &#123;</div><div class="line">  ctx.body = <span class="string">'Hello World'</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<ol>
<li>当你需要写一些需要回调的方法时候，用Node V7就爽了:</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">const Koa = require('koa');</div><div class="line">const app = new Koa();</div><div class="line"></div><div class="line"># 这就是怎么写一个异步的程序，是不是爽。</div><div class="line">app.use(async ctx =&gt; &#123;</div><div class="line">    const start = new Date();</div><div class="line">    await next();</div><div class="line">    const ms = new Date() - start;</div><div class="line">    ctx.set('X-Response-Time', `$&#123;ms&#125;ms`);</div><div class="line">    ctx.body = '哈哈哈';</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ol>
<li>处理错误以及异常</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">app.on(<span class="string">'error'</span>, err =&gt;</div><div class="line">  log.error(<span class="string">'server error'</span>, err)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>抛出异常<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ctx.throw(<span class="number">403</span>);</div><div class="line">ctx.throw(<span class="string">'name required'</span>, <span class="number">400</span>);</div><div class="line">ctx.throw(<span class="number">400</span>, <span class="string">'name required'</span>);</div></pre></td></tr></table></figure></p>
<ol>
<li><p>获取Request信息</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"># 获取POST信息</div><div class="line">Post: ctx.request.body;</div><div class="line"></div><div class="line"># 获取问号传值的信, 比如?a=b, 那么就可以写成 ctx.request.query.a</div><div class="line">Get: cxt.request.query;</div><div class="line"></div><div class="line">ctx.header</div><div class="line">ctx.headers</div><div class="line">ctx.method</div><div class="line">ctx.method=</div><div class="line">ctx.url</div><div class="line">ctx.url=</div><div class="line">ctx.originalUrl</div><div class="line">ctx.origin</div><div class="line">ctx.href</div><div class="line">ctx.path</div><div class="line">ctx.path=</div><div class="line">ctx.query</div><div class="line">ctx.query=</div><div class="line">ctx.querystring</div><div class="line">ctx.querystring=</div><div class="line">ctx.host</div><div class="line">ctx.hostname</div><div class="line">ctx.fresh</div><div class="line">ctx.stale</div><div class="line">ctx.socket</div><div class="line">ctx.protocol</div><div class="line">ctx.secure</div><div class="line">ctx.ip</div><div class="line">ctx.ips</div><div class="line">ctx.subdomains</div><div class="line">ctx.is()</div><div class="line">ctx.accepts()</div><div class="line">ctx.acceptsEncodings()</div><div class="line">ctx.acceptsCharsets()</div><div class="line">ctx.acceptsLanguages()</div><div class="line">ctx.get()</div></pre></td></tr></table></figure>
</li>
<li><p>获取Response信息</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">ctx.body</div><div class="line">ctx.body=</div><div class="line">ctx.status</div><div class="line">ctx.status=</div><div class="line">ctx.message</div><div class="line">ctx.message=</div><div class="line">ctx.length=</div><div class="line">ctx.length</div><div class="line">ctx.type=</div><div class="line">ctx.type</div><div class="line">ctx.headerSent</div><div class="line">ctx.redirect()</div><div class="line">ctx.attachment()</div><div class="line">ctx.set()</div><div class="line">ctx.append()</div><div class="line">ctx.remove()</div><div class="line">ctx.lastModified=</div><div class="line">ctx.etag=</div></pre></td></tr></table></figure>
</li>
</ol>
<p>嗯，就是这么简单。</p>
<h3 id="Koa-Router"><a href="#Koa-Router" class="headerlink" title="Koa Router"></a>Koa Router</h3><p>毕竟，这个框架太简洁，如果我们要单独处理，http method,大概大家会疯掉的，于是，偷懒一下；引入一个扩展<br>Koa Better Router</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"># 引入router</div><div class="line">let Router = require('koa-better-router');</div><div class="line">let router = Router().loadMthods();</div><div class="line"></div><div class="line"># 可以使用HTTP METHODS的方法</div><div class="line">router.get('/api/', async ctx =&gt; &#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">router.post('/api/', async ctx =&gt; &#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">router.put('/api/', async ctx =&gt; &#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">router.del('/api/', async ctx =&gt; &#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"># 如果想添加一些参数</div><div class="line">router.get('/api/:id/:name,', async ctx =&gt; &#123;</div><div class="line">  # 现在我们取出参数</div><div class="line">  let id = ctx.params.id;</div><div class="line">  let name = ctx.params.name;</div><div class="line">  # 是不是超级方便</div><div class="line">&#125;);</div><div class="line"></div><div class="line"># 加入router扩展, 如果一个警告说你，版本不对，那么直接引入</div><div class="line"># const convert = require('koa-convert'),</div><div class="line"># 然后引入 convert(router.middleware());</div><div class="line">app.use(router.middleware());</div></pre></td></tr></table></figure>
<h3 id="Koa-Body"><a href="#Koa-Body" class="headerlink" title="Koa Body"></a>Koa Body</h3><p>同样，我觉得原生的对于post的处理很不好(懒)，所以，我决定引入扩展(‘koa-bodyparser), 它可以更友好的处理body的解析。<br>如果，是传递的是Content-Type: application/json, 那么它会自动解析成JS对象。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var bodyParser = require('koa-bodyparser');</div><div class="line">app.use(bodyParser());</div><div class="line">app.use(async ctx =&gt; &#123;</div><div class="line">  # ctx.request.body, 是获取的Request的JS对象.</div><div class="line">  ctx.body = ctx.request.body;</div><div class="line">  #很方便 这时候，你访问url的时候，会自动添加Response: 'Content-Type: application/json'</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Koa-Render"><a href="#Koa-Render" class="headerlink" title="Koa Render"></a>Koa Render</h3><p>呃，主要是用来渲染页面方便</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> views = <span class="built_in">require</span>(<span class="string">'koa-views'</span>);</div><div class="line"></div><div class="line"><span class="comment">//设置view目录</span></div><div class="line">app.use(views(__dirname + <span class="string">'/views'</span>));</div><div class="line"></div><div class="line">router.get(<span class="string">'/api/'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</div><div class="line">  <span class="comment">// views/user.html , 传递参数为 &#123;user: '哈哈哈哈'&#125;</span></div><div class="line">  <span class="keyword">await</span> ctx.render(<span class="string">'user'</span>, &#123;</div><div class="line">    <span class="attr">user</span>: <span class="string">'哈哈哈哈'</span></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose"></a>Mongoose</h3><p>MongoDB 的ORM扩展, 可以很方便的的查询数据库等等，借助于语言本身天生异步处理，所以可以实现最大化的性能优势。</p>
<ul>
<li><p>首先，可以创建models的文件, 数据类型如下</p>
<ul>
<li>String</li>
<li>Number</li>
<li>Date</li>
<li>Boolean</li>
<li>Mixed (这个有点意思，混合类，由于mongo可以是数组，也可是Object)</li>
<li>ObjectId , MongoID类型，当然也可以生成的字符串类型的对象ID，new Mongoose.ObjectId, 就会生成的ID（其实一般也没啥用）</li>
<li>Array<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"># 创建文件App.js</div><div class="line">module.exports = new Schema(</div><div class="line">    &#123;</div><div class="line">        app_name: &#123;</div><div class="line">            type: Schema.Types.String,</div><div class="line">            index: true, // 表示它是索引</div><div class="line">            unique: true,//唯一，不能重复</div><div class="line">            maxlength: 20 //表示最大长度是20，如果输入超过20，数据库会报错，注意，这个错误是程序级别的，不是数据库级别的。</div><div class="line">        &#125;,</div><div class="line">        app_name_hash: &#123;</div><div class="line">            type: Schema.Types.String</div><div class="line">        &#125;,</div><div class="line">        app_version: Schema.Types.String, //版本</div><div class="line">        app_content: Schema.Types.Mixed, // 内容</div><div class="line">        project_info: &#123;</div><div class="line">            project_name: Schema.Types.String, //基础信息中的项目名称</div><div class="line">            project_id: Schema.Types.Number, // 基础信息中的项目ID</div><div class="line">        &#125;,</div><div class="line">        status: &#123;</div><div class="line">            type: Schema.Types.Number,</div><div class="line">            default: 1 //1, 正常; 2, 关闭，</div><div class="line">        &#125;,</div><div class="line">        preview_port: Schema.Types.Number //预览端口</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        collection: 'app_templates'</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>查询一个</p>
<ul>
<li>查询一个App<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 引入model</div><div class="line">let model = require('App');</div><div class="line"># 查询一条数据</div><div class="line">let app_info = App.findOne(&#123;</div><div class="line">  app_name: params.app_name,</div><div class="line">  app_version: params.app_version</div><div class="line">&#125;);</div><div class="line"># 查询多条数据, select表示，保留哪些fields字段</div><div class="line">let app_components = App.find().select(&#123;comp_id: 1, comp_name: 1, comp_desc: 1, _id:0&#125;).exec();</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>插入一条数据</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">let model = require('App');</div><div class="line">let app = new App(</div><div class="line">  &#123;</div><div class="line">      app_name: params.app_name,</div><div class="line">      app_name_hash: app_name_hash,</div><div class="line">      app_version: app_version,</div><div class="line">      app_structure: &#123;&#125;,</div><div class="line">      app_content: &#123;&#125;,</div><div class="line">      project_info:&#123;</div><div class="line">          project_name: params.project_name,</div><div class="line">          project_id: params.project_id</div><div class="line">      &#125;,</div><div class="line">      preview_port: params.preview_port</div><div class="line">  &#125;);</div><div class="line">  # 注意异步的事情，有可能它还没执行完，就去执行下一步了，哈哈哈哈哈，小心哟</div><div class="line">  app.save();</div></pre></td></tr></table></figure>
<h1 id="更新一条数据"><a href="#更新一条数据" class="headerlink" title="更新一条数据"></a>更新一条数据</h1><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 先查一下, 再更新</div><div class="line">let app_info = App.findOne(&#123;</div><div class="line">  app_name: params.app_name,</div><div class="line">  app_version: params.app_version</div><div class="line">&#125;);</div><div class="line">app_info.app_name = '哈哈哈哈';</div><div class="line">app_info.save();</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Cherrio"><a href="#Cherrio" class="headerlink" title="Cherrio"></a>Cherrio</h3><p>用来快速解析HTML</p>
<h3 id="Fs-extra"><a href="#Fs-extra" class="headerlink" title="Fs-extra"></a>Fs-extra</h3><p>用来扩展FS文件处理。</p>
<h3 id="Strongloop"><a href="#Strongloop" class="headerlink" title="Strongloop"></a>Strongloop</h3>]]></content>
      
        <categories>
            
            <category> coding </category>
            
            <category> NodeJS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Webpack]]></title>
      <url>https://www.heyyezi.com/2017/03/20/webpack/</url>
      <content type="html"><![CDATA[<blockquote>
<p>简单介绍一个工具而已<br><a id="more"></a></p>
</blockquote>
<p><img src="http://img0.tuicool.com/7ZBJzaF.jpg!web" alt="上图"></p>
<h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>  Webpack 是一个JS模块化打包工具。</p>
<h3 id="需要加工哪些文件"><a href="#需要加工哪些文件" class="headerlink" title="需要加工哪些文件"></a>需要加工哪些文件</h3><p>  Webpack会为当前应用创建一个完整的依赖关系图。依赖解析的入口文件被称为入口点。这个文件会告诉webpack怎么去管理需要依赖的库文件，并且怎么去打包他们。<br>  在webpack中，我们在webpack.config.js中做配置。<br>  <strong>webpack.config.js</strong></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="string">'./app.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="如果我们有多个入口文件，如果我们想把入口文件，和vendors文件分开呢"><a href="#如果我们有多个入口文件，如果我们想把入口文件，和vendors文件分开呢" class="headerlink" title="如果我们有多个入口文件，如果我们想把入口文件，和vendors文件分开呢"></a>如果我们有多个入口文件，如果我们想把入口文件，和vendors文件分开呢</h4><p>  用法: entry: string|Array<string><br>  <strong>webpack.config.js</strong></string></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">app</span>: <span class="string">'./app.js'</span>,</div><div class="line">    <span class="attr">vendors</span>: <span class="string">'./vendors.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>  以上，是说把app.js和vendor.js分别独立的所有依赖都处理完成。</p>
<p>  多页应用<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">pageOne</span>: <span class="string">'./src/pageOne/index.js'</span>,</div><div class="line">    <span class="attr">pageTwo</span>: <span class="string">'./src/pageTwo/index.js'</span>,</div><div class="line">    <span class="attr">pageThree</span>: <span class="string">'./src/pageThree/index.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="加工之后放哪"><a href="#加工之后放哪" class="headerlink" title="加工之后放哪"></a>加工之后放哪</h3><p>  当把所有的依赖都妥善处置好之后，需要配置把这个处理之后的文件放哪。<br>  <strong>webpack.config.js</strong></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./app.js'</span></div><div class="line">  output: &#123;</div><div class="line">    <span class="attr">path</span>: path.reslove(__dirname, <span class="string">'dist'</span>),</div><div class="line">    <span class="attr">filename</span>: <span class="string">'my-first-webpack.bundle.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>  output 需要最基本的需要两个配置</p>
<ul>
<li><p>output.filename, 编译之后的文件名，比如 main.js || bundle.js || index.js。切记不要写加文件路径，比如../test/main.js</p>
<ul>
<li><p>如果只有一个入口文件，</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./src/app.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span>,</div><div class="line">    <span class="attr">path</span>: __dirname + <span class="string">'/build'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// writes to disk: ./build/bundle.js</span></div></pre></td></tr></table></figure>
</li>
<li><p>如果有多个入口文件, 那么你就需要把文件名配置成参数形式:</p>
<ul>
<li>[name], 加上名字</li>
<li>[hash], 加上hash串</li>
<li>[chunkhash], [chunkHash:5], 表示保留五位hash,其他同上<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">app</span>: <span class="string">'./src/app.js'</span>,</div><div class="line">    <span class="attr">search</span>: <span class="string">'./src/search.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">filename</span>: <span class="string">'[name].[id].js'</span>,<span class="comment">//只要你喜欢，可以拼成[name].[hash].[chunkhash].js</span></div><div class="line">    path: __dirname + <span class="string">'/build'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// writes to disk: ./build/app.js, ./build/search.js</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>output.path, 一个 <strong>绝对路径</strong> 地址，</p>
<ul>
<li>如果js使用了cdn的地址，那么<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">output: &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">"/home/proj/cdn/assets/[hash]"</span>,</div><div class="line">    <span class="attr">publicPath</span>: <span class="string">"http://cdn.example.com/assets/[hash]/"</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 如果一开始你不知大publicPath, 那么这个为止可以为空，然后在入口文件中写入</span></div><div class="line">__webpack_public_path__ = <span class="string">"http://cdn.example.com/assets/[hash]/"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>其他徐昂想配置有</p>
</li>
<li>output.chunkFilename, 按需加载的时候，如果这个文件并没有写入entry中，那么它处理的时候起名方式 <a href="https://github.com/webpack/webpack/tree/webpack-1/examples/named-chunks" target="_blank" rel="external">例子</a><ul>
<li>[id], 可以用ID拼</li>
<li>[name], 同上</li>
<li>[hash], 同上</li>
<li>[chunkhash], 同上</li>
</ul>
</li>
<li>output.crossOriginLoading, 设置跨域加载块<ul>
<li>false, 默认，禁止跨域加载。</li>
<li>anonymous, 开启允许跨域加载。</li>
<li>use-credentials, 标志启用验证，cookie，SSL，HTTP验证等</li>
</ul>
</li>
<li>output.hotUpdateChunkFilename, 配置热更新chunk文件名, 它包含在output.path里面，<ul>
<li>[id]</li>
<li>[hash]</li>
<li>默认起名： [id].[hash].hot-update.js</li>
</ul>
</li>
<li>output.hotUpdateFunction, 一个异步加载人更新chunk方法，JSONP的方法, 默认是: webpackHotUpdate</li>
<li>output.hotUpdateMainFilename, 热更新主文件名, 它包含在output.path里面，默认是: [hash].hot-update.json</li>
<li>output.jsonpFunction, 用于异步加载模块的时候使用JSONP的方法名，默认是：webpackJsonp, 注意两点<ul>
<li>起一个短一些的名字，能减少网络传输</li>
<li>如果是单页面程序，那么注意不要命名冲突</li>
</ul>
</li>
<li>output.library, 如果设置了的话名字的话，也就是给库起个名字，比如jquery，那么它可以导出成一个library库，并且可以单独发布它。</li>
<li>output.libraryTarget, 库的类型<ul>
<li>var, 默认的，以一个普通变量的形式调用, var Library = xxx</li>
<li>this, 设置一个属性，this: this[“Library”] = xxx</li>
<li>commonjs, exports: exports[“Library”] = xxx</li>
<li>commonjs2, module.exports: module.exports = xxx</li>
<li>amd, 没用过，欢迎补充</li>
<li>umd, 没用过，欢迎补充</li>
</ul>
</li>
<li>output.sourceMapFilename, 可以自定义js的sourceMap文件名，默认是是”[file].map”<ul>
<li>[file]</li>
<li>[id]</li>
<li>[hash]</li>
</ul>
</li>
</ul>
<h3 id="那么，除了JS其他文件类型怎么办"><a href="#那么，除了JS其他文件类型怎么办" class="headerlink" title="那么，除了JS其他文件类型怎么办"></a>那么，除了JS其他文件类型怎么办</h3><p>  Webpack本身只能处理JS的内容，那么如果需要处理css,html,scss,jpg,png等怎么办。这就需要插件，我们加它loader。<br>  不同的loaders处理各自的文件，然后会把各自要处理的文件，放到依赖关系中。<br>  总体来说，它会做两件事:</p>
<ol>
<li>确定哪些文件要被哪些loader处理</li>
<li>处理这些文件，然后把这些文件放到依赖关系中。</li>
</ol>
<p><strong>注意</strong>:<br>  -loader其实是可以省略不写的，也就是说css-loader可以写成css<br>  多个loader之间用“!”连接起来，比如style-loader!css-loader</p>
<p>  <strong>webpack.config.js</strong></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./app.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'dist'</span>),</div><div class="line">    <span class="attr">filename</span>: <span class="string">'my-first-webpack.bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">rules</span>: [</div><div class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.(js|jsx)$/</span>, <span class="attr">use</span>: <span class="string">'babel-loader'</span>&#125; <span class="comment">// 把js,jsx文件，扔到babel-loader中处理</span></div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = config;</div></pre></td></tr></table></figure>
<h4 id="Loaders"><a href="#Loaders" class="headerlink" title="Loaders"></a>Loaders</h4><ol>
<li><p>如果我们需要过滤css文件，那么我们首先要找到css的loader</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev css-loader</div></pre></td></tr></table></figure>
</li>
<li><p>我们在webpack.config.js中配置css过滤规则</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">rules</span>: [</div><div class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: <span class="string">'css-loader'</span>&#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>还有一种更复杂的写法, 用来优雅的处理不同的loader</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">  <span class="attr">rules</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">      <span class="attr">use</span>: [</div><div class="line">        &#123; <span class="attr">loader</span>: <span class="string">'style-loader'</span>&#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">loader</span>: <span class="string">'css-loader'</span>,</div><div class="line">          <span class="attr">options</span>: &#123;</div><div class="line">            <span class="attr">modules</span>: <span class="literal">true</span></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>命令行模式调用loader</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ webpack --<span class="built_in">module</span>-bind css-loader --<span class="built_in">module</span>-bind <span class="string">'css=style-loader!css-loader'</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Resolve配置，不建议修改"><a href="#Resolve配置，不建议修改" class="headerlink" title="Resolve配置，不建议修改"></a>Resolve配置，不建议修改</h3><p> 本模块用来，修改加载模块的方式。一般情况下，不需要你对Webpack的模块加载进行干预，因为它已经很智能了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">app</span>: <span class="string">'./src/main.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: config.build.assetsRoot,</div><div class="line">    <span class="attr">filename</span>: <span class="string">'[name].js'</span>,</div><div class="line">    <span class="attr">publicPath</span>: process.env.NODE_ENV === <span class="string">'production'</span></div><div class="line">      ? config.build.assetsPublicPath</div><div class="line">      : config.dev.assetsPublicPath</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">resolve</span>: &#123;</div><div class="line">    <span class="attr">extensions</span>: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</div><div class="line">    <span class="attr">alias</span>: &#123;</div><div class="line">      <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</div><div class="line">      <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  ......</div></pre></td></tr></table></figure></p>
<h4 id="resolve-alias"><a href="#resolve-alias" class="headerlink" title="resolve.alias"></a>resolve.alias</h4><ol>
<li>给你的要导入的模块起一个简称，比如 reslove(‘src’) 路径变成 ‘@’ 符号, 那么你需要执行你要引入src中的文件</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'@/components/Hello'</span></div></pre></td></tr></table></figure>
<ol>
<li>‘$’, 符号，一般放在单词后面，比如’vue$’, 标示精确匹配，比如<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alias: &#123;</div><div class="line">  <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>那么，当你引入的时候<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 正确的✅</span></div><div class="line"><span class="keyword">import</span> Test1 <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"></div><div class="line"><span class="comment">//错误的❌</span></div><div class="line"><span class="keyword">import</span> Test2 <span class="keyword">from</span> <span class="string">'vue/te'</span></div></pre></td></tr></table></figure></p>
<p><a href="https://webpack.js.org/configuration/resolve/#components/sidebar/sidebar.jsx" target="_blank" rel="external">从官网抄的</a></p>
<table>
<thead>
<tr>
<th>alias:</th>
<th>import “xyz”</th>
<th>import “xyz/file.js”</th>
</tr>
</thead>
<tbody>
<tr>
<td>{}</td>
<td>/abc/node_modules/xyz/index.js</td>
<td>/abc/node_modules/xyz/file.js</td>
</tr>
<tr>
<td>{ xyz: “/abs/path/to/file.js” }</td>
<td>/abs/path/to/file.js</td>
<td>error</td>
</tr>
<tr>
<td>{ xyz$: “/abs/path/to/file.js” }</td>
<td>/abs/path/to/file.js</td>
<td>/abc/node_modules/xyz/file.js</td>
</tr>
<tr>
<td>{ xyz: “./dir/file.js” }</td>
<td>/abc/dir/file.js</td>
<td>error</td>
</tr>
<tr>
<td>{ xyz$: “./dir/file.js” }</td>
<td>/abc/dir/file.js</td>
<td>/abc/node_modules/xyz/file.js</td>
</tr>
<tr>
<td>{ xyz: “/some/dir” }</td>
<td>/some/dir/index.js</td>
<td>/some/dir/file.js</td>
</tr>
</tbody>
</table>
<h4 id="resolve-extensions，没事别修改它"><a href="#resolve-extensions，没事别修改它" class="headerlink" title="resolve.extensions，没事别修改它!"></a>resolve.extensions，没事别修改它!</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">extensions: [<span class="string">".js"</span>, <span class="string">".json"</span>]</div><div class="line"></div><div class="line"><span class="comment">//可能是./extt.json， 也可能是./ext.js</span></div><div class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">'./extt'</span></div></pre></td></tr></table></figure>
<p>默认系统会在寻找 .js. .json的文件</p>
<p>如果你覆盖的了这个默认的文件类型，就不知道会出什么事了</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>   当然，webpack一定是支持插件的，loaders可以处理基础文件，如果有些自一定的处理，比如压缩文件，加入混淆字符串等，就需要plugins。<br>   使用的时候，只要require对应的plugin, 然后new 一个实例姐可以了。这样，更神奇的是，你可以为了不同的目的，使用多次同一个plugin。</p>
<p>   <strong>webpack.config.js</strong><br>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./app.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'dist'</span>),</div><div class="line">    <span class="attr">filename</span>: <span class="string">'my-first-webpack.bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">rules</span>: [</div><div class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.(js|jsx)$/</span>, <span class="attr">use</span>: <span class="string">'babel-loader'</span>&#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(), <span class="comment">// 混淆压缩文件</span></div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">'./src/index.html'</span>&#125;)</div><div class="line">  ]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = config;</div></pre></td></tr></table></figure></p>
<p>   更多plugins，请访问 <a href="https://webpack.js.org/plugins" target="_blank" rel="external">点我</a></p>
<p>   一个复杂的配置信息例子<br>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> webpackMerge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> baseConfig = &#123;</div><div class="line">  <span class="attr">target</span>: <span class="string">'async-node'</span>,</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">entry</span>: <span class="string">'./entry.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'dist'</span>),</div><div class="line">    <span class="attr">filename</span>: <span class="string">'[name].js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'inline'</span>,</div><div class="line">      <span class="attr">filename</span>: <span class="string">'inline.js'</span>,</div><div class="line">      <span class="attr">minChunks</span>: <span class="literal">Infinity</span></div><div class="line">    &#125;),</div><div class="line">    <span class="keyword">new</span> webpack.optimize.AggressiveSplittingPlugin(&#123;</div><div class="line">        <span class="attr">minSize</span>: <span class="number">5000</span>,</div><div class="line">        <span class="attr">maxSize</span>: <span class="number">10000</span></div><div class="line">    &#125;),</div><div class="line">  ]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> targets = [<span class="string">'web'</span>, <span class="string">'webworker'</span>, <span class="string">'node'</span>, <span class="string">'async-node'</span>, <span class="string">'node-webkit'</span>, <span class="string">'electron-main'</span>].map(<span class="function">(<span class="params">target</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">let</span> base = webpackMerge(baseConfig, &#123;</div><div class="line">    <span class="attr">target</span>: target,</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">      <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'dist/'</span> + target),</div><div class="line">      <span class="attr">filename</span>: <span class="string">'[name].'</span> + target + <span class="string">'.js'</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> base;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = targets;</div></pre></td></tr></table></figure></p>
<h3 id="JS语法规则"><a href="#JS语法规则" class="headerlink" title="JS语法规则"></a>JS语法规则</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ babel-preset-es2015</div><div class="line"></div><div class="line"># react转码规则</div><div class="line">$ babel-preset-react</div><div class="line"></div><div class="line"># ES7不同阶段</div><div class="line">$ babel-preset-stage-0</div><div class="line">$ babel-preset-stage-1</div><div class="line">$ babel-preset-stage-2</div><div class="line">$ babel-preset-stage-3</div></pre></td></tr></table></figure>
<h2 id="VUE-LOADER"><a href="#VUE-LOADER" class="headerlink" title="VUE-LOADER"></a>VUE-LOADER</h2><h3 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h3><p>  过滤编译vuejs为普通JS的模块</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> Tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git简介]]></title>
      <url>https://www.heyyezi.com/2017/03/12/gitintro/</url>
      <content type="html"><![CDATA[<blockquote>
<p>简单介绍一下GIT, 用作培训，不用点进来看了<br><a id="more"></a></p>
</blockquote>
<h2 id="GIT-和-SVN"><a href="#GIT-和-SVN" class="headerlink" title="GIT 和 SVN"></a>GIT 和 SVN</h2><h3 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a>SVN</h3><p>  我一开始用的是svn，那就先从svn说起，svn就是典型的集中式是管理，也就是所有操作必须与代码服务器通信。总体来说还是比较好用的，因为比起上一代CVS，它可以创建分支，虽然它的分支是真的把整个目录拷出来一份(比较挫), 而且离开网络什么也干不了, 当你在紧急情况下，diff文件的时候，网络却以几b的速度。。。。。。</p>
<p><img src="https://git-scm.com/book/en/v2/images/distributed.png" alt="https://git-scm.com/book/en/v2/images/distributed.png"></p>
<h3 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h3><p>  GIT起源与维护Linux核心库维护工作, 被认为是分布式的版本管理工具,每一个客户端都会有一份完整的版本记录(所以目录会比较大),所有的操作都会是在本地进行, 你的每次提交，它都会在本地做一次快照，只是<strong>存储本次修改的数据</strong>。他的特点基本如下</p>
<ul>
<li>GIT关注的是数据，svn关注的是文件，比如svn，举个例子，你在git和svn中创建一个空文件夹试试上传代码。</li>
<li>GIT几乎所有的操作都是在本地</li>
<li>简单分支创建，切换</li>
<li>离线操作，缓存本地的提交，git会保留你所有的提交记录，然后在联网之后，与其他伙伴合并代码</li>
<li>先进的存储模式。</li>
</ul>
<h3 id="三种状态"><a href="#三种状态" class="headerlink" title="三种状态"></a>三种状态</h3><p>这是正题，git有三种状态</p>
<ul>
<li>Committed, 已经安全提交到了版本库</li>
<li>Modified, 文件已经修改了，但是未提交</li>
<li>Staged, 对那些需要提交到版本库的Modified的文件，做标记，等待提交操作</li>
</ul>
<div id="sequence-0"></div>


<p>所以.git文件就是当前项目的版本数据库，它包含了，这个项目的一切信息。</p>
<h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p>我一般会给git常用命令设置别名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git config --global alias.co checkout</div><div class="line">$ git config --global alias.br branch</div><div class="line">$ git config --global alias.ci commit</div><div class="line">$ git config --global alias.st status</div></pre></td></tr></table></figure>
<p>这样</p>
<ul>
<li>git checkout == git co</li>
<li>git branch  == git br</li>
<li>git commit == git ci</li>
<li>git status = git st</li>
</ul>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>推荐大家使用Source Tree,很好用</p>
<ul>
<li>首先设置自己<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;John Doe&quot;</div><div class="line">$ git config --global user.email johndoe@example.com</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="clone-代码"><a href="#clone-代码" class="headerlink" title="clone 代码"></a>clone 代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git clone git@github.com:php-ai/php-ml.git</div><div class="line"># 如果你只想要最新的代码，当前的网络又特别慢的时候，你可以指定要下载哪几次提交的代码(尤其在公司的时候下载github代码)</div><div class="line">$ git clone git@github.com:php-ai/php-ml.git --depth 1 //可以试试，有惊喜</div></pre></td></tr></table></figure>
<h4 id="设置自己编辑器-默认是vim"><a href="#设置自己编辑器-默认是vim" class="headerlink" title="设置自己编辑器, 默认是vim"></a>设置自己编辑器, 默认是vim</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git config --global core.editor atom</div><div class="line"># 设置忽略大小写引起的改动那么</div><div class="line"># 默认是false</div><div class="line">$ git config --global core.ignorecase true</div></pre></td></tr></table></figure>
<h4 id="查看配置文件"><a href="#查看配置文件" class="headerlink" title="查看配置文件"></a>查看配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git config --list</div><div class="line">  user.name=John Doe</div><div class="line">  user.email=johndoe@example.com</div><div class="line">  color.status=auto</div><div class="line">  color.branch=auto</div><div class="line">  color.interactive=auto</div><div class="line">  color.diff=auto</div></pre></td></tr></table></figure>
<ul>
<li>文件状态变化</li>
</ul>
<div id="sequence-1"></div>


<h4 id="查看git状态-git-status"><a href="#查看git状态-git-status" class="headerlink" title="查看git状态, git status"></a>查看git状态, git status</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master # 目前在master分支上</div><div class="line">nothing to commit, working directory clean # 这个目录是干净的</div></pre></td></tr></table></figure>
<h5 id="创建新文件"><a href="#创建新文件" class="headerlink" title="创建新文件"></a>创建新文件</h5>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ echo &apos;test git&apos; &gt; test_git.txt</div><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Initial commit</div><div class="line">Untracked files: # 当前这些文件状态是Untracked</div><div class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed) # 推荐你进行这些操作</div><div class="line">	test_git.txt # 这些文件没有被版本追踪</div><div class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</div><div class="line"></div><div class="line">$ git add test_git.txt # 如果是多个文件git add * , 把这些文件放在Staged中</div><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Initial commit</div><div class="line">Changes to be committed: # Staged状态,</div><div class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</div><div class="line">	new file:   test_git.txt # 这个文件暂存</div><div class="line">$ git commit -m &quot;这是要写理由&quot;</div></pre></td></tr></table></figure>
<ul>
<li>简洁的输出, git status -s<ul>
<li>新添加的未跟踪文件前面有 ?? 标记，</li>
<li>新添加到暂存区中的文件前面有 A 标记，</li>
<li>修改过的文件前面有 M 标记<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git status -s #推荐使用这个命令，比较简洁</div><div class="line">M  test_git.txt # 说明这个文件修改过了</div><div class="line">?? test.md # 这个文件是没有被追踪的</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="忽略文件-gitignore"><a href="#忽略文件-gitignore" class="headerlink" title="忽略文件, .gitignore"></a>忽略文件, .gitignore</h4><ul>
<li># 和 空行，都会被忽略</li>
<li>支持正则匹配</li>
<li>匹配模式以(/)开始，以(/)结束</li>
<li>要忽略制定模式意外的文件, 加(!)</li>
<li>匹配任意目录<code>d/**/d1</code>, 可以匹配<code>d/d2/d1</code>, <code>d/d2/d3/d1</code>等, 一个<code>*</code>,匹配任何文件;<code>.</code>没有其他意义<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> # 忽略当前目录里面的文件 TEST</div><div class="line">/TEST</div><div class="line"> # 这个才是忽略TEST目录以及下面的文件</div><div class="line">TEST/</div><div class="line"># 忽略test目录所有后缀是.pyc的文件</div><div class="line">test/**/*.pyc</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>diff 文件，暂存区，是只还没有commit的文件<ul>
<li>git diff, 如果要对比未放入暂存区的文件，直接输入</li>
<li>git diff –staged, 如果要对比已经进入暂存区文件</li>
</ul>
</li>
</ul>
<h4 id="提交文件-git-commit"><a href="#提交文件-git-commit" class="headerlink" title="提交文件 git commit"></a>提交文件 git commit</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git commit # 提交文件</div><div class="line">$ git commit -a -m &apos;此处输入理由&apos; # 这个可以直接跳过暂存区进行暂存</div></pre></td></tr></table></figure>
<h4 id="暂存修改，提交代码"><a href="#暂存修改，提交代码" class="headerlink" title="暂存修改，提交代码"></a>暂存修改，提交代码</h4><p>如果，本地有没修改玩的代码，但是这个时候又需要合并别的人代码，那么这个时候就需要</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git stash</div><div class="line">$ git pull origin master</div></pre></td></tr></table></figure>
<p>当把别人的代码合并了之后，需要把之前的暂存代码拉出来这个时候<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git stash pop # 把最近一次的暂存文件拿出来</div><div class="line">$ git stash</div></pre></td></tr></table></figure></p>
<h5 id="当我们觉得刚才输入的-m-写的不好，我们可以进行后悔重新写"><a href="#当我们觉得刚才输入的-m-写的不好，我们可以进行后悔重新写" class="headerlink" title="当我们觉得刚才输入的 -m 写的不好，我们可以进行后悔重新写"></a>当我们觉得刚才输入的 -m 写的不好，我们可以进行后悔重新写</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit --amend -m &apos;这次写的炫酷的理由&apos;</div></pre></td></tr></table></figure>
<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><ul>
<li>git rm<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git rm a.t # 删除a.t，真的就没有这个文件了</div><div class="line">$ git status -s # 查看状态</div><div class="line">D  a.t</div><div class="line"></div><div class="line">$ git rm a.t --cached # 只是删除了缓存区内的文件，但是并不会删除文件</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="查看历史"><a href="#查看历史" class="headerlink" title="查看历史"></a>查看历史</h4><h5 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">commit ef80dd6875bfea55723a280caa9f5ad5ecc87a74</div><div class="line">Author: t &lt;t@playcrab.com&gt;</div><div class="line">Date:   Sun Mar 12 19:46:09 2017 +0800</div><div class="line"></div><div class="line">    asdasd</div><div class="line"></div><div class="line">commit 5c9e8df22d8b3d46833619caffd56655e9a0c6ed</div><div class="line">Author: t &lt;t@playcrab.com&gt;</div><div class="line">Date:   Sun Mar 12 19:42:37 2017 +0800</div><div class="line"></div><div class="line">    dd</div><div class="line"></div><div class="line">commit 60202107a4292ff2fb375f64099b841f7bb639ac</div><div class="line">Author: t &lt;t@playcrab.com&gt;</div><div class="line">Date:   Sun Mar 12 19:39:28 2017 +0800</div></pre></td></tr></table></figure>
<h5 id="git-log-p-2"><a href="#git-log-p-2" class="headerlink" title="git log -p -2"></a>git log -p -2</h5><p>查看版本差异，-p 后面的数字，表示最近几个版本的差异，比如-2，代表最近两个版本差异<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">commit 52c661dcca23764c0ed24d32215ab7ca961af31d</div><div class="line">Author: t &lt;t@playcrab.com&gt;</div><div class="line">Date:   Sun Mar 12 19:46:09 2017 +0800</div><div class="line"></div><div class="line">    asdasd</div><div class="line"></div><div class="line">diff --git a/a.t b/a.t</div><div class="line">deleted file mode 100644</div><div class="line">index 5d308e1..0000000</div><div class="line">--- a/a.t</div><div class="line">+++ /dev/null</div><div class="line">@@ -1 +0,0 @@</div><div class="line">-aaaa</div><div class="line"></div><div class="line">commit 5c9e8df22d8b3d46833619caffd56655e9a0c6ed</div><div class="line">Author: t &lt;t@playcrab.com&gt;</div><div class="line">Date:   Sun Mar 12 19:42:37 2017 +0800</div><div class="line"></div><div class="line">    dd</div><div class="line"></div><div class="line">diff --git a/a.t b/a.t</div><div class="line">index 304f1bb..5d308e1 100644</div><div class="line">--- a/a.t</div><div class="line">+++ b/a.t</div><div class="line">@@ -1 +1 @@</div><div class="line">-adas</div><div class="line">+aaaa</div></pre></td></tr></table></figure></p>
<h5 id="git-log-–stat"><a href="#git-log-–stat" class="headerlink" title="git log –stat"></a>git log –stat</h5><p>这个是简单的统计信息,比如有此次更新有多少修改，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">commit 23a4d911feb212e50d5f5d32f802b460c2ca01c8</div><div class="line">Author: t &lt;t@playcrab.com&gt;</div><div class="line">Date:   Sun Mar 12 20:10:28 2017 +0800</div><div class="line"></div><div class="line">    ttttttt</div><div class="line"></div><div class="line"> a.t | 2 ++</div><div class="line"> 1 file changed, 2 insertions(+)</div><div class="line"></div><div class="line">commit 52c661dcca23764c0ed24d32215ab7ca961af31d</div><div class="line">Author: t &lt;t@playcrab.com&gt;</div><div class="line">Date:   Sun Mar 12 19:46:09 2017 +0800</div><div class="line"></div><div class="line">    asdasd</div><div class="line"></div><div class="line"> a.t | 1 -</div><div class="line"> 1 file changed, 1 deletion(-)</div><div class="line"></div><div class="line">commit 5c9e8df22d8b3d46833619caffd56655e9a0c6ed</div><div class="line">Author: t &lt;t@playcrab.com&gt;</div><div class="line">Date:   Sun Mar 12 19:42:37 2017 +0800</div><div class="line"></div><div class="line">    dd</div><div class="line"></div><div class="line"> a.t | 2 +-</div><div class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</div></pre></td></tr></table></figure>
<h5 id="git-log-–pretty"><a href="#git-log-–pretty" class="headerlink" title="git log –pretty"></a>git log –pretty</h5><p>美化日志输出:</p>
<ul>
<li><p>oneline， 简化为1行输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">d3373c97e1bd4fceb0687d2e289998bccda514f1 Fix old reference to _sheetIndex in HTML Writer</div><div class="line">1c8c2379ccf5ab9dd7cb46be965821d22173bcf4 Fix to Radar and Scatter chart examples</div><div class="line">900325d0c809bc9cc4263fe67881d7627bb0b7f3 Minor updates to composer</div><div class="line">e487f5c11a4b62376015d1e7da27420be0932275 Fix for multiple worksheets, all with merge cells, in HTML Writer</div><div class="line">fcc5c6585574054bd2dce530d5fb3f5da745bc49 Fix to 01simple.php example after mis-commit</div><div class="line">650d2d099c293794cbaa9f41c332cf90078a4428 Merge branch &apos;develop&apos; into 1.8</div><div class="line">b2029564e5fe1f7e8a154defe20604666c7192a3 Fix for XML settings, together with unit tests</div><div class="line">b0ce48fd92e15a874b8246d645072ad817b68114 Merge pull request #895 from psirus0588/patch-1</div><div class="line">772e66f74a2162574d6fa128b26381a6299d084e Update 01-Getting-Started.md</div><div class="line">8af620f97b8b1c8a677d90b3d7203fa562050db1 GH-879 Bug in file PHPExcel/Reader/CSV.php Code logic identifying a defined separator when no separator is explicitly defined Case-insensitive check when separator is explicitly defined</div></pre></td></tr></table></figure>
</li>
<li><p>shor, full, fuller 这三个可以试试，有惊喜</p>
</li>
<li>format, 可以自定义输出显示内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ git log --pretty=%h\ \ %s //只显示简短commit号和提交信息</div><div class="line">d3373c9  Fix old reference to _sheetIndex in HTML Writer</div><div class="line">1c8c237  Fix to Radar and Scatter chart examples</div><div class="line">900325d  Minor updates to composer</div><div class="line">e487f5c  Fix for multiple worksheets, all with merge cells, in HTML Writer</div><div class="line">fcc5c65  Fix to 01simple.php example after mis-commit</div><div class="line">650d2d0  Merge branch &apos;develop&apos; into 1.8</div><div class="line">b202956  Fix for XML settings, together with unit tests</div><div class="line">b0ce48f  Merge pull request #895 from psirus0588/patch-1</div><div class="line">772e66f  Update 01-Getting-Started.md</div><div class="line">8af620f  GH-879 Bug in file PHPExcel/Reader/CSV.php Code logic identifying a defined separator when no separator is explicitly defined Case-insensitive check when separator is explicitly defined</div><div class="line">c4782b6  General: (sim642) Pull Request 489 - Implement actual timezone adjustment into PHPExcel_Shared_Date::PHPToExcel</div><div class="line">a1dee8f  Bugfix: (vitalyrepin) Pull Request 869 - c:max and c:min elements shall NOT be inside c:orientation elements</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><em>以下表格，摘自的是官网内容</em></strong></p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>%H</td>
<td>提交对象（commit）的完整哈希字串</td>
</tr>
<tr>
<td>%h</td>
<td>提交对象的简短哈希字串</td>
</tr>
<tr>
<td>%an</td>
<td>作者（author）的名字</td>
</tr>
<tr>
<td>%s</td>
<td>提交说明</td>
</tr>
<tr>
<td>%cr</td>
<td>提交日期，按多久以前的方式显示</td>
</tr>
</tbody>
</table>
<p>常用的选项</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-p</td>
<td>按补丁格式显示每个更新之间的差异。</td>
</tr>
<tr>
<td>–stat</td>
<td>显示每次更新的文件修改统计信息。</td>
</tr>
<tr>
<td>–shortstat</td>
<td>只显示 –stat 中最后的行数修改添加移除统计。</td>
</tr>
<tr>
<td>–name-only</td>
<td>仅在提交信息后显示已修改的文件清单。</td>
</tr>
<tr>
<td>–name-status</td>
<td>显示新增、修改、删除的文件清单。</td>
</tr>
<tr>
<td>–relative-date</td>
<td>使用较短的相对时间显示（比如，“2 weeks ago”）。</td>
</tr>
<tr>
<td>–graph</td>
<td>显示 ASCII 图形表示的分支合并历史。<strong>这个很好用</strong></td>
</tr>
<tr>
<td>–pretty</td>
<td>使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。</td>
</tr>
</tbody>
</table>
<h5 id="git-log-其他一些好用的方法"><a href="#git-log-其他一些好用的方法" class="headerlink" title="git log 其他一些好用的方法"></a>git log 其他一些好用的方法</h5><ul>
<li>git log –since=2017-03-10 –after=2017-03-11， 从2017-03-10开始之后的到2017-03-11日之前提交显示</li>
<li>git log –until=2017-03-10，–before=2017-03-09， 在2017-03-09之后到2017-03-10之前的提交, 由于本人英语没过六级，所以更牛逼的语法，我也不会写</li>
<li>git log –author=MarkBaker, 查询MarkBaker提交的记录显示</li>
<li>git log –grep=test，显示包含test的提交</li>
<li>git log -Stest, 显示包含删除，或者新增的包含test的文件</li>
</ul>
<h3 id="GIT数据恢复-危险，一般别用，后果自负"><a href="#GIT数据恢复-危险，一般别用，后果自负" class="headerlink" title="GIT数据恢复 (危险，一般别用，后果自负)"></a>GIT数据恢复 (危险，一般别用，后果自负)</h3><ul>
<li>当你不小心删除了一个分支之后</li>
<li><p>先让我们认为造几个删除分支的情况</p>
<ul>
<li>git reset –soft HEAD~2 和 git reset –hard HEAD~2 区别是soft 只是向下走两个指针，hard却会删除那两个提交<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ git log --oneline# 查看分支</div><div class="line">b0ce48f Merge pull request #895 from psirus0588/patch-1</div><div class="line">772e66f Update 01-Getting-Started.md</div><div class="line">8af620f GH-879 Bug in file PHPExcel/Reader/CSV.php Code logic identifying a defined separator when no separator is explicitly defined Case-insensitive check when separator is explicitly defined</div><div class="line">c4782b6 General: (sim642) Pull Request 489 - Implement actual timezone adjustment into PHPExcel_Shared_Date::PHPToExcel</div><div class="line">a1dee8f Bugfix: (vitalyrepin) Pull Request 869 - c:max and c:min elements shall NOT be inside c:orientation elements</div><div class="line"></div><div class="line">$ git reset --hard HEAD^^ #(注意HEAD^^，它表示，向前三个版本删掉)</div><div class="line">$ git log --oneline</div><div class="line">c4782b6 General: (sim642) Pull Request 489 - Implement actual timezone adjustment into PHPExcel_Shared_Date::PHPToExcel</div><div class="line">a1dee8f Bugfix: (vitalyrepin) Pull Request 869 - c:max and c:min elements shall NOT be inside c:orientation elements</div><div class="line">1a23757 Merge pull request #869 from vitalyrepin/1.8</div><div class="line">4491898 Bug fix: c:max and c:min elements must not be inside c:orientation elements. They shall be inside c:scaling elements. Otherwise they are ignored by Excel and Libreoffice</div><div class="line"></div><div class="line">$ git reset --hard HEAD~2 # (注意，这个，标示前两个版本删除)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>然后，让我们发现删除错了, 需要恢复文件的时候, 我建议你自己新建一个分支，用来做恢复使用</p>
</li>
</ul>
<ol>
<li><strong>切记不要在当前分支恢复</strong></li>
<li><strong>切记不要在当前分支恢复</strong></li>
<li><strong>切记不要在当前分支恢复</strong></li>
</ol>
<ul>
<li><p>接下来，我们进行恢复操作</p>
</li>
<li><p>如果我们要恢复之前删除，可以使用命令git reflog 工具，它忠实的记录我们每次操作的日志，如果你发现你的操作这里也没有，那么就说明，你可以放弃了恢复了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ git reflog</div><div class="line">c4782b6 HEAD@&#123;0&#125;: reset: moving to HEAD^^ # 这是之前的操作</div><div class="line"># 如果想看详细的自己操作记录</div><div class="line">$ git log -g</div><div class="line">commit c4782b660619be139a64d96a545f6a422ca74c20</div><div class="line">Reflog: HEAD@&#123;0&#125; (t &lt;t@playcrab.com&gt;)</div><div class="line">Reflog message: reset: moving to HEAD^^</div><div class="line">Author: MarkBaker &lt;mark@lange.demon.co.uk&gt;</div><div class="line">Date:   Thu Mar 31 23:50:44 2016 +0100</div><div class="line"></div><div class="line">    General: (sim642) Pull Request 489 - Implement actual timezone adjustment into PHPExcel_Shared_Date::PHPToExcel</div><div class="line"></div><div class="line"># 我们开始恢复到一个新分支(recover)中</div><div class="line">$ git branch recover c4782b660619be139a64d96a545f6a422ca74c20</div></pre></td></tr></table></figure>
</li>
<li><p>git fsck –full, 终极大招，如果实在找不到，那么就执行这个</p>
</li>
</ul>
<h3 id="GIT最牛技能，分支"><a href="#GIT最牛技能，分支" class="headerlink" title="GIT最牛技能，分支"></a>GIT最牛技能，分支</h3><ul>
<li>我们使用的git分支模型, 请参考<a href="http://www.ituring.com.cn/article/56870" target="_blank" rel="external">GitFlow</a></li>
<li><p>git checkout -b work 新建一个分支, 并且切换到分支work<br>分支的合并 merge –no-ff<br>TODO</p>
</li>
<li><p>git branch -d work 删除分支work<br>TODO</p>
</li>
<li><p>git clone –bare 下载纯净代码</p>
</li>
<li><p>GIT 变基….<br>TODO</p>
</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="git"><a href="#git" class="headerlink" title=".git"></a>.git</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">COMMIT_EDITMSG</div><div class="line">HEAD # 重要，指向当前所在的分支</div><div class="line">ORIG_HEAD</div><div class="line">branches/</div><div class="line">config # 可以覆盖全局的git config --global</div><div class="line">description # 没啥用</div><div class="line">hooks/ # 文件提供了回调函数, 比如自定义，提交之前做什么，提交之后做什么，更新之后做什么</div><div class="line">index # 当前暂存区的信息</div><div class="line">info/</div><div class="line">logs/</div><div class="line">objects/ # 重要，存储所有数据内容</div><div class="line">refs/ # 重要，存储各分支，tag当前指向的引用</div></pre></td></tr></table></figure>
<p>查看提交信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git cat-file -p 1c8c2379ccf5ab9dd7cb46be965821d22173bcf4</div></pre></td></tr></table></figure></p>
<h4 id="git-add-i-交互式的提交方式，这个很哔，使用起来，比一般的GUI工具要牛哔"><a href="#git-add-i-交互式的提交方式，这个很哔，使用起来，比一般的GUI工具要牛哔" class="headerlink" title="git add -i # 交互式的提交方式，这个很哔，使用起来，比一般的GUI工具要牛哔"></a>git add -i # 交互式的提交方式，这个很哔，使用起来，比一般的GUI工具要牛哔</h4><h3 id="git-调试代码"><a href="#git-调试代码" class="headerlink" title="git 调试代码"></a>git 调试代码</h3><h4 id="git-blame"><a href="#git-blame" class="headerlink" title="git blame"></a>git blame</h4><ul>
<li>我要分析文件 Classes/PHPExcel/Shared/Date.php 第80 到 85行到底什么时候添加的代码，为毛写的这么挫(举例而已，人家写的很好)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git blame -C -L 84,90:Classes/PHPExcel/Shared/Date.php</div><div class="line">f7296f58 (MarkBaker 2015-05-13 00:40:55 +0100 84)     public static function setExcelCalendar($baseDate)</div><div class="line">f7296f58 (MarkBaker 2015-05-13 00:40:55 +0100 85)     &#123;</div><div class="line">f7296f58 (MarkBaker 2015-05-13 00:40:55 +0100 86)         if (($baseDate == self::CALENDAR_WINDOWS_1900) ||</div><div class="line">f7296f58 (MarkBaker 2015-05-13 00:40:55 +0100 87)             ($baseDate == self::CALENDAR_MAC_1904)) &#123;</div><div class="line">f7296f58 (MarkBaker 2015-05-13 00:40:55 +0100 88)             self::$excelBaseDate = $baseDate;</div><div class="line">f7296f58 (MarkBaker 2015-05-13 00:40:55 +0100 89)             return true;</div><div class="line">f7296f58 (MarkBaker 2015-05-13 00:40:55 +0100 90)         &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="git-bisect"><a href="#git-bisect" class="headerlink" title="git bisect"></a>git bisect</h4><ul>
<li>我们要查找一个bug，但是不知道bug出在哪里，这个时候，我们可以告诉git哪一个版本的时候还是正常的，到哪一个版本之后就错误了</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git bisect start # 我们要开始查找错误了</div><div class="line">$ git bisect bad # 从这里开始就错误了</div><div class="line">$ git bisect good f94dcb9852debe2f1068b828f4c27c7fddc92c7b # 这个版本的时候还是好的</div><div class="line">Bisecting: 44 revisions left to test after this (roughly 6 steps)</div><div class="line">[e7c7a6eb53e05daec307fa380bdf84bdb35f9363] Merge branch &apos;1.8&apos; of https://github.com/PHPOffice/PHPExcel into 1.8</div><div class="line">$ git bisect bad # 如果你这个时候，还是不行，那么它就会继续查找</div><div class="line">$ git bisect bad  # 这次会继续尝试</div><div class="line">$ git bisect good  # 直到找到问题的根源，输入good标示, 这样查找结束</div><div class="line">$ git bisect reset # 一定要记住，reset回原始状态，否则你就会停留在一个奇怪的提交树</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PonyOrm之初体验]]></title>
      <url>https://www.heyyezi.com/2017/03/07/python-ponyorm/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这是一个很好用的python ORM库所以推荐一下,顺便安利一个工具<br><a id="more"></a></p>
</blockquote>
<h3 id="先来安利一个工具Pipenv"><a href="#先来安利一个工具Pipenv" class="headerlink" title="先来安利一个工具Pipenv"></a>先来安利一个工具Pipenv</h3><p>  大家都用过virtualenv吧，这货把Pipfile, pip, virtualenv这三个工具集合到了一起，完美的结合到了一起。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install pipenv</div></pre></td></tr></table></figure>
<p>  警告⚠️:<br>    <strong>如果你的默认环境小于版本python2.7.10，安装的时候出现任何问题，概不负责</strong></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>  初始化python2.*的环境<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ mkdir your_dir</div><div class="line">$ cd your_dir</div><div class="line">$ pipenv install --two # 此处会有很多输出，请忽略</div><div class="line">$ pipenv shell # 进入虚拟环境(python2)</div><div class="line">(your_dir)(your_dir) exit # 离开虚拟环境</div></pre></td></tr></table></figure></p>
<p>  初始化python3.*的环境<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ mkdir your_dir</div><div class="line">$ cd your_dir</div><div class="line">$ pipenv install --three # 此处会有很多输出，请忽略</div><div class="line">$ pipenv shell # 进入虚拟环境(python3)</div><div class="line">(your_dir)(your_dir) exit # 离开虚拟环境</div></pre></td></tr></table></figure></p>
<p>  初始化完成后，如果并不想进入虚拟环境, 执行python命令，<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pipenv run python # 这个时候python，是虚拟环境中的python</div><div class="line">$ pienv run pip install ansible # 此时是向虚拟环境中安装ansible</div></pre></td></tr></table></figure></p>
<p>  创建自己的依赖文件, 下次你只要把Pipfile文件，拿到别的地方，执行pipenv install 那么机会自动把环境包装好<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ pipenv shell</div><div class="line">(your_dir)(your_dir) pipenv install requests # 这时候，你会发现你的Pipfile中多了一个包的</div><div class="line">(your_dir)(your_dir) pipenv lock --dev # 锁定版本</div></pre></td></tr></table></figure></p>
<p>  如果你当前环境已经有一个虚拟环境，那么再创建一个的时候，会覆盖之前的。</p>
<p><img src="https://camo.githubusercontent.com/2287c881cb3a045f4f70f20f0326ec4ef1474ccd/687474703a2f2f6d656469612e6b656e6e657468726569747a2e636f6d2e73332e616d617a6f6e6177732e636f6d2f706970656e762e676966" alt="Pipenv图片"></p>
<h3 id="切入正题-PonyOrm"><a href="#切入正题-PonyOrm" class="headerlink" title="切入正题, PonyOrm"></a>切入正题, PonyOrm</h3><p>  <a href="https://ponyorm.com/" target="_blank" rel="external">PonyOrm</a>, 它是一个关系型数据库对象ROM工具(mysql,sqlit),可以方便的写做表的联合等，尤其是数据导入，导出的时候很方便。<br>特点：</p>
<ul>
<li>简单的查询语法</li>
<li>自动优化查询</li>
<li>对于N+1的问题解决方案(orm总会多查询一次，用来缓存数据，具体请自行百度)</li>
<li>又一个在线编辑工具 <a href="https://editor.ponyorm.com/" target="_blank" rel="external">查看</a>（不好用）</li>
</ul>
]]></content>
      
        <categories>
            
            <category> coding </category>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
